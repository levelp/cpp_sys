// Демонстрация "зачем нужны шаблоны"
// Задача: мы хотим написать функции сортировки для всех типов данных
#include <iostream>

using namespace std;

// Если не использовать шаблоны,
// то для 2 типов (int, сhar) требуется две реализации
// функции сортировки

void sort(int a[], int size) {
  // Используем простейший алгоритм сортировки
  // На i-ом шаге сделаем, чтобы на i-ом месте
  // был минимальный элемент на отрезке массива от i до конца массива
  for(int i = 0; i < size; ++i)

    // i - начало интервала, пусть j пробегает все элементы после i
    for(int j = i + 1; j < size; ++j)
      if(a[j] < a[i]) { // Если какой-то элемент меньше, то именно он должен стоять
        // на i-ом месте
        // Меняем два элемента
        // чтобы на i-ом месте стоял минимальный
        // элемент
        int temp = a[i]; // временная переменная
        a[i] = a[j];
        a[j] = temp;
      }
}

// Вторая реализация точно такая же, но int заменяем на char
void sortc(char a[], int size) {
  for(int i = 0; i < size; ++i)
    for(int j = i + 1; j < size; ++j)
      if(a[j] < a[i]) {
        // Меняем два элемента
        // чтобы на i-ом месте стоял минимальный
        // элемент
        char temp = a[i]; // временная переменная
        a[i] = a[j];
        a[j] = temp;
      }
}

// Универсальная сортировка
// template <class T>
template <typename T> // T - имя типа
void s(T a[], int size) {
  for(int i = 0; i < size; ++i)
    for(int j = i + 1; j < size; ++j)
      if(a[j] < a[i]) {
        // Меняем два элемента
        // чтобы на i-ом месте стоял минимальный
        // элемент
        T temp = a[i]; // временная переменная, используем T - параметр шаблона
        a[i] = a[j];
        a[j] = temp;
      }
}

int main() {
  // Массив целых чисел
  int a[] = {20, 10, 13};
  // s<int>(a,3)
  s(a, 3);

  for(int i = 0; i < 3; ++i)
    cout << "a[" << i << "] = " << a[i] << endl;

  // Массив букв
  char c[] = {'g', 'a', 'c'};
  s<char>(c, 3);

  for(int i = 0; i < 3; ++i)
    cout << "c[" << i << "] = " << c[i] << endl;

  // Можно применить и к действительным числам
  double d[] = {1.23, 5.3, 2.3};
  s<double>(d, 3);

  for(int i = 0; i < 3; ++i)
    cout << "d[" << i << "] = " << d[i] << endl;

  // ..и к строкам...
  string ss[] = {"test", "sfds", "hi"};
  s<string>(ss, 3);

  for(int i = 0; i < 3; ++i)
    cout << "ss[" << i << "] = " << ss[i] << endl;

  // ...и к любым другим типам данных (в том числе своим)..
  // ..к которым применима операция "меньше"..

  return 0;
}
